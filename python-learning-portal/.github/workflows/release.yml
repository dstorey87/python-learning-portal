name: 'Release Management'

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch
      pre_release:
        description: 'Pre-release'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  # Job 1: Create Release (if workflow_dispatch)
  create-release:
    name: 'Create Release'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 10
    
    outputs:
      new_tag: ${{ steps.version.outputs.new_tag }}
      new_version: ${{ steps.version.outputs.new_version }}
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Bump Version'
        id: version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Bump version
          npm version ${{ github.event.inputs.release_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          NEW_TAG="v$NEW_VERSION"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          
          echo "New version: $NEW_VERSION"
          echo "New tag: $NEW_TAG"

      - name: 'Update Changelog'
        run: |
          # Generate changelog entry
          echo "## [${{ steps.version.outputs.new_version }}] - $(date +'%Y-%m-%d')" > CHANGELOG_ENTRY.md
          echo "" >> CHANGELOG_ENTRY.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "### Changes" >> CHANGELOG_ENTRY.md
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> CHANGELOG_ENTRY.md
          else
            echo "### Changes" >> CHANGELOG_ENTRY.md
            echo "- Initial release" >> CHANGELOG_ENTRY.md
          fi
          echo "" >> CHANGELOG_ENTRY.md
          
          # Prepend to CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG_ENTRY.md CHANGELOG.md > CHANGELOG_NEW.md
            mv CHANGELOG_NEW.md CHANGELOG.md
          else
            cp CHANGELOG_ENTRY.md CHANGELOG.md
          fi

      - name: 'Commit Changes'
        run: |
          git add package.json CHANGELOG.md
          git commit -m "chore: release v${{ steps.version.outputs.new_version }}"
          git tag ${{ steps.version.outputs.new_tag }}
          git push origin main
          git push origin ${{ steps.version.outputs.new_tag }}

  # Job 2: Build Release Assets
  build-release:
    name: 'Build Release Assets'
    runs-on: ubuntu-latest
    needs: create-release
    if: always() && (needs.create-release.result == 'success' || github.event_name == 'push')
    timeout-minutes: 30
    
    strategy:
      matrix:
        service: ['executor', 'backend', 'frontend']
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Get Version Info'
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            VERSION=${TAG_NAME#v}
          else
            TAG_NAME=${{ needs.create-release.outputs.new_tag }}
            VERSION=${{ needs.create-release.outputs.new_version }}
          fi
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: |
          npm ci
          npm run install:all

      - name: 'Build Service'
        run: npm run build:${{ matrix.service }}

      - name: 'Create Distribution Archive'
        run: |
          # Create distribution directory
          mkdir -p dist-${{ matrix.service }}
          
          if [ "${{ matrix.service }}" = "executor" ]; then
            cp -r packages/@portal/executor/dist/* dist-${{ matrix.service }}/
            cp packages/@portal/executor/package.json dist-${{ matrix.service }}/
            cp packages/@portal/executor/Dockerfile dist-${{ matrix.service }}/
          else
            cp -r ${{ matrix.service }}/dist/* dist-${{ matrix.service }}/
            cp ${{ matrix.service }}/package.json dist-${{ matrix.service }}/
            cp ${{ matrix.service }}/Dockerfile dist-${{ matrix.service }}/
          fi
          
          # Create archive
          tar -czf python-portal-${{ matrix.service }}-${{ steps.version.outputs.version }}.tar.gz dist-${{ matrix.service }}

      - name: 'Upload Release Asset'
        uses: actions/upload-artifact@v4
        with:
          name: python-portal-${{ matrix.service }}-${{ steps.version.outputs.version }}
          path: python-portal-${{ matrix.service }}-${{ steps.version.outputs.version }}.tar.gz

  # Job 3: Build and Push Docker Images
  build-docker:
    name: 'Build Docker Images'
    runs-on: ubuntu-latest
    needs: create-release
    if: always() && (needs.create-release.result == 'success' || github.event_name == 'push')
    timeout-minutes: 30
    
    strategy:
      matrix:
        service: ['executor', 'backend', 'frontend']
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Get Version Info'
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            VERSION=${TAG_NAME#v}
          else
            TAG_NAME=${{ needs.create-release.outputs.new_tag }}
            VERSION=${{ needs.create-release.outputs.new_version }}
          fi
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: 'Login to Amazon ECR Public'
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: 'Build and Push Docker Image'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'executor' && 'packages/@portal/executor' || matrix.service }}
          file: ${{ matrix.service == 'executor' && 'packages/@portal/executor/Dockerfile' || format('{0}/Dockerfile', matrix.service) }}
          push: true
          tags: |
            public.ecr.aws/python-portal/python-portal-${{ matrix.service }}:${{ steps.version.outputs.version }}
            public.ecr.aws/python-portal/python-portal-${{ matrix.service }}:latest
          target: production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NODE_ENV=production
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            GIT_SHA=${{ github.sha }}

  # Job 4: Create GitHub Release
  create-github-release:
    name: 'Create GitHub Release'
    runs-on: ubuntu-latest
    needs: [create-release, build-release, build-docker]
    if: always() && (needs.create-release.result == 'success' || github.event_name == 'push')
    timeout-minutes: 10
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Get Version Info'
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            VERSION=${TAG_NAME#v}
          else
            TAG_NAME=${{ needs.create-release.outputs.new_tag }}
            VERSION=${{ needs.create-release.outputs.new_version }}
          fi
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 'Download Release Assets'
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: 'Generate Release Notes'
        id: release-notes
        run: |
          # Get the latest changelog entry
          if [ -f CHANGELOG.md ]; then
            # Extract the latest version's changelog
            sed -n "/## \[${{ steps.version.outputs.version }}\]/,/## \[/p" CHANGELOG.md | head -n -1 > release-notes.md
          else
            echo "## Changes" > release-notes.md
            echo "" >> release-notes.md
            
            # Get commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> release-notes.md
            else
              echo "- Initial release" >> release-notes.md
            fi
          fi
          
          # Add Docker images info
          echo "" >> release-notes.md
          echo "## Docker Images" >> release-notes.md
          echo "" >> release-notes.md
          echo "- \`public.ecr.aws/python-portal/python-portal-executor:${{ steps.version.outputs.version }}\`" >> release-notes.md
          echo "- \`public.ecr.aws/python-portal/python-portal-backend:${{ steps.version.outputs.version }}\`" >> release-notes.md
          echo "- \`public.ecr.aws/python-portal/python-portal-frontend:${{ steps.version.outputs.version }}\`" >> release-notes.md
          echo "" >> release-notes.md
          echo "## Deployment" >> release-notes.md
          echo "" >> release-notes.md
          echo "```bash" >> release-notes.md
          echo "# Deploy to AWS Lightsail" >> release-notes.md
          echo "cd infrastructure" >> release-notes.md
          echo "./deploy.sh prod" >> release-notes.md
          echo "```" >> release-notes.md

      - name: 'Create Release'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: 'Release ${{ steps.version.outputs.version }}'
          body_path: release-notes.md
          draft: false
          prerelease: ${{ github.event.inputs.pre_release == 'true' }}
          files: |
            release-assets/**/*.tar.gz
          generate_release_notes: false

  # Job 5: Deploy Release (if not pre-release)
  deploy-release:
    name: 'Deploy Release'
    runs-on: ubuntu-latest
    needs: [create-github-release]
    if: |
      always() && 
      needs.create-github-release.result == 'success' && 
      github.event.inputs.pre_release != 'true'
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Trigger Deployment'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflow } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: context.ref,
              inputs: {
                environment: 'production',
                force_deploy: 'true'
              }
            });
            
            console.log('Triggered deployment workflow');

  # Job 6: Release Summary
  release-summary:
    name: 'Release Summary'
    runs-on: ubuntu-latest
    needs: [create-release, build-release, build-docker, create-github-release, deploy-release]
    if: always()
    
    steps:
      - name: 'Generate Release Summary'
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "push" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            VERSION=${TAG_NAME#v}
          else
            TAG_NAME=${{ needs.create-release.outputs.new_tag }}
            VERSION=${{ needs.create-release.outputs.new_version }}
          fi
          
          echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** $TAG_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Create Release | ${{ needs.create-release.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Assets | ${{ needs.build-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Docker | ${{ needs.build-docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-github-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy Release | ${{ needs.deploy-release.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.create-github-release.result }}" = "success" ]; then
            echo "✅ **Release Created Successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Docker Images:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`public.ecr.aws/python-portal/python-portal-executor:$VERSION\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`public.ecr.aws/python-portal/python-portal-backend:$VERSION\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`public.ecr.aws/python-portal/python-portal-frontend:$VERSION\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Release Failed!**" >> $GITHUB_STEP_SUMMARY
          fi