name: 'CI/CD Pipeline - Build & Test'

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/**'
      - 'backend/**'
      - 'frontend/**'
      - 'infrastructure/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [main, develop]
    paths:
      - 'packages/**'
      - 'backend/**'
      - 'frontend/**'
      - 'infrastructure/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'package-lock.json'

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Job 1: Code Quality & Security
  quality-gate:
    name: 'Code Quality & Security'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: |
          npm ci
          npm run install:all

      - name: 'Run ESLint'
        run: npm run lint

      - name: 'Run TypeScript Check'
        run: npm run type-check

      - name: 'Security Audit'
        run: |
          npm audit --audit-level=moderate
          npx audit-ci --config .audit-ci.json || true

      - name: 'Dependency Check'
        run: |
          npx depcheck --ignores="@types/*,eslint-*"
          
      - name: 'License Check'
        run: npx license-checker --summary

  # Job 2: Unit & Integration Tests
  test-services:
    name: 'Test Microservices'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-gate
    
    strategy:
      matrix:
        service: ['types', 'executor', 'backend', 'frontend']
        
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Setup Python'
        if: matrix.service == 'executor'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 'Install Dependencies'
        run: |
          npm ci
          npm run install:all

      - name: 'Build Service - ${{ matrix.service }}'
        run: npm run build:${{ matrix.service }}

      - name: 'Test Service - ${{ matrix.service }}'
        run: npm run test:${{ matrix.service }}

      - name: 'Upload Test Results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.service }}
          path: |
            packages/@portal/${{ matrix.service }}/coverage/
            ${{ matrix.service }}/coverage/
          retention-days: 7

  # Job 3: Build Docker Images
  build-images:
    name: 'Build Docker Images'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test-services
    
    strategy:
      matrix:
        service: ['executor', 'backend', 'frontend']
        
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Build Docker Image - ${{ matrix.service }}'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'executor' && 'packages/@portal/executor' || matrix.service }}
          file: ${{ matrix.service == 'executor' && 'packages/@portal/executor/Dockerfile' || format('{0}/Dockerfile', matrix.service) }}
          push: false
          tags: python-portal-${{ matrix.service }}:${{ github.sha }}
          target: production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 'Test Docker Image'
        run: |
          docker run --rm -d --name test-${{ matrix.service }} python-portal-${{ matrix.service }}:${{ github.sha }}
          sleep 10
          
          # Health check
          if [ "${{ matrix.service }}" != "frontend" ]; then
            docker exec test-${{ matrix.service }} curl -f http://localhost:3000/health || exit 1
          else
            docker exec test-${{ matrix.service }} curl -f http://localhost:80/health || exit 1
          fi
          
          docker stop test-${{ matrix.service }}

  # Job 4: Integration Tests
  integration-tests:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: build-images
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: |
          npm ci
          npm run install:all

      - name: 'Start Development Environment'
        run: |
          cd infrastructure
          chmod +x deploy.sh
          ./deploy.sh dev
        env:
          NODE_ENV: test

      - name: 'Wait for Services'
        run: |
          timeout 120 bash -c '
            until curl -f http://localhost:3003/health; do
              echo "Waiting for executor service..."
              sleep 5
            done
            until curl -f http://localhost:3001/health; do
              echo "Waiting for backend service..."
              sleep 5
            done
            until curl -f http://localhost:5173; do
              echo "Waiting for frontend service..."
              sleep 5
            done
          '

      - name: 'Run Integration Tests'
        run: npm run test:integration

      - name: 'Run E2E Tests'
        run: npx playwright test --config=playwright.config.ts

      - name: 'Upload Test Artifacts'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

      - name: 'Stop Services'
        if: always()
        run: |
          cd infrastructure
          ./deploy.sh stop

  # Job 5: Security Scanning
  security-scan:
    name: 'Security Scanning'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-gate
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Run Trivy Vulnerability Scanner'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 'Upload Trivy Results'
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 'Run Semgrep'
        uses: returntocorp/semgrep-action@v1
        with:
          generateSarif: "1"

  # Job 6: Performance Tests
  performance-tests:
    name: 'Performance Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: |
          npm ci
          npm install -g artillery

      - name: 'Start Production Environment'
        run: |
          cd infrastructure
          chmod +x deploy.sh
          ./deploy.sh prod

      - name: 'Wait for Services'
        run: |
          timeout 120 bash -c '
            until curl -f http://localhost/health; do
              echo "Waiting for application..."
              sleep 10
            done
          '

      - name: 'Run Performance Tests'
        run: |
          # API Performance Test
          artillery quick --count 10 --num 100 http://localhost/api/health
          
          # Frontend Load Test
          artillery quick --count 5 --num 50 http://localhost/

      - name: 'Stop Services'
        if: always()
        run: |
          cd infrastructure
          ./deploy.sh stop

  # Job 7: Build Summary
  build-summary:
    name: 'Build Summary'
    runs-on: ubuntu-latest
    needs: [quality-gate, test-services, build-images, integration-tests, security-scan]
    if: always()
    
    steps:
      - name: 'Check Build Status'
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.quality-gate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Service Tests | ${{ needs.test-services.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Builds | ${{ needs.build-images.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Fail if any critical job failed
          if [ "${{ needs.quality-gate.result }}" != "success" ] || 
             [ "${{ needs.test-services.result }}" != "success" ] || 
             [ "${{ needs.build-images.result }}" != "success" ]; then
            echo "❌ Build failed - critical jobs unsuccessful"
            exit 1
          else
            echo "✅ Build successful - all critical jobs passed"
          fi